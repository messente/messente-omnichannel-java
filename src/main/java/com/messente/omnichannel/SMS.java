/*
 * Omnichannel API
 * This is the beta version of Omnichannel API
 *
 * OpenAPI spec version: 0.0.1
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.messente.omnichannel;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.messente.omnichannel.Message;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * SMS
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2018-07-06T08:53:17.979+03:00[Europe/Tallinn]")
public class SMS extends Message {
  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text = null;

  public static final String SERIALIZED_NAME_AUTOCONVERT = "autoconvert";
  @SerializedName(SERIALIZED_NAME_AUTOCONVERT)
  private BigDecimal autoconvert = null;

  public static final String SERIALIZED_NAME_UDH = "udh";
  @SerializedName(SERIALIZED_NAME_UDH)
  private String udh = null;

  public SMS text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Text content of the SMS
   * @return text
  **/
  @ApiModelProperty(example = "Hello world!", required = true, value = "Text content of the SMS")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public SMS autoconvert(BigDecimal autoconvert) {
    this.autoconvert = autoconvert;
    return this;
  }

   /**
   * Defines how non-GSM characters will be treated: - \&quot;on\&quot; Use replacement settings from the account&#39;s [API Auto Replace settings page](https://dashboard.messente.com/api-settings/auto-replace)(default) - \&quot;full\&quot; All non GSM 03.38 characters will be replaced with suitable alternatives - \&quot;off\&quot; Message content is not modified in any way 
   * @return autoconvert
  **/
  @ApiModelProperty(value = "Defines how non-GSM characters will be treated: - \"on\" Use replacement settings from the account's [API Auto Replace settings page](https://dashboard.messente.com/api-settings/auto-replace)(default) - \"full\" All non GSM 03.38 characters will be replaced with suitable alternatives - \"off\" Message content is not modified in any way ")
  public BigDecimal getAutoconvert() {
    return autoconvert;
  }

  public void setAutoconvert(BigDecimal autoconvert) {
    this.autoconvert = autoconvert;
  }

  public SMS udh(String udh) {
    this.udh = udh;
    return this;
  }

   /**
   * hex-encoded string containing SMS UDH
   * @return udh
  **/
  @ApiModelProperty(value = "hex-encoded string containing SMS UDH")
  public String getUdh() {
    return udh;
  }

  public void setUdh(String udh) {
    this.udh = udh;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SMS SMS = (SMS) o;
    return Objects.equals(this.text, SMS.text) &&
        Objects.equals(this.autoconvert, SMS.autoconvert) &&
        Objects.equals(this.udh, SMS.udh) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, autoconvert, udh, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SMS {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    autoconvert: ").append(toIndentedString(autoconvert)).append("\n");
    sb.append("    udh: ").append(toIndentedString(udh)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

