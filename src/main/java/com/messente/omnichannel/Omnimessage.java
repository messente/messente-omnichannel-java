/*
 * Omnichannel API
 * Messente's API which allows sending messages via various channels with fallback options.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.messente.omnichannel;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Omnimessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2018-10-22T21:01:57.001+03:00[Europe/Tallinn]")
public class Omnimessage {
  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<Object> messages = new ArrayList<Object>();

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_DRL_URL = "drl_url";
  @SerializedName(SERIALIZED_NAME_DRL_URL)
  private String drlUrl;

  public static final String SERIALIZED_NAME_TIME_TO_SEND = "time_to_send";
  @SerializedName(SERIALIZED_NAME_TIME_TO_SEND)
  private OffsetDateTime timeToSend;

  public Omnimessage messages(List<Object> messages) {
    this.messages = messages;
    return this;
  }

  public Omnimessage addMessagesItem(Object messagesItem) {
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Get messages
   * @return messages
  **/
  @ApiModelProperty(required = true, value = "")
  public List<Object> getMessages() {
    return messages;
  }

  public void setMessages(List<Object> messages) {
    this.messages = messages;
  }

  public Omnimessage to(String to) {
    this.to = to;
    return this;
  }

   /**
   * Phone number of the recipient in e.164 format
   * @return to
  **/
  @ApiModelProperty(required = true, value = "Phone number of the recipient in e.164 format")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public Omnimessage drlUrl(String drlUrl) {
    this.drlUrl = drlUrl;
    return this;
  }

   /**
   * URL where the delivery report will be sent
   * @return drlUrl
  **/
  @ApiModelProperty(value = "URL where the delivery report will be sent")
  public String getDrlUrl() {
    return drlUrl;
  }

  public void setDrlUrl(String drlUrl) {
    this.drlUrl = drlUrl;
  }

  public Omnimessage timeToSend(OffsetDateTime timeToSend) {
    this.timeToSend = timeToSend;
    return this;
  }

   /**
   * Optional parameter for sending messages at some specific time in the future. Time must be specified in the 8601 format. If no timezone is specified, then the timezone is assumed to be UTC. Examples: Time specified with timezone: 2018-06-22T09:05:07+00:00 Time specified in UTC: 2018-06-22T09:05:07Z Time specified without timezone: 2018-06-22T09:05 (equivalent to 2018-06-22T09:05+00:00) 
   * @return timeToSend
  **/
  @ApiModelProperty(value = "Optional parameter for sending messages at some specific time in the future. Time must be specified in the 8601 format. If no timezone is specified, then the timezone is assumed to be UTC. Examples: Time specified with timezone: 2018-06-22T09:05:07+00:00 Time specified in UTC: 2018-06-22T09:05:07Z Time specified without timezone: 2018-06-22T09:05 (equivalent to 2018-06-22T09:05+00:00) ")
  public OffsetDateTime getTimeToSend() {
    return timeToSend;
  }

  public void setTimeToSend(OffsetDateTime timeToSend) {
    this.timeToSend = timeToSend;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Omnimessage omnimessage = (Omnimessage) o;
    return Objects.equals(this.messages, omnimessage.messages) &&
        Objects.equals(this.to, omnimessage.to) &&
        Objects.equals(this.drlUrl, omnimessage.drlUrl) &&
        Objects.equals(this.timeToSend, omnimessage.timeToSend);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messages, to, drlUrl, timeToSend);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Omnimessage {\n");
    
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    drlUrl: ").append(toIndentedString(drlUrl)).append("\n");
    sb.append("    timeToSend: ").append(toIndentedString(timeToSend)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

